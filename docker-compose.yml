services:
  redis:
    image: redis:7
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - internal
    deploy:
      mode: replicated
      replicas: 1
      resources:
        reservations:
          memory: 16M
        limits:
          memory: 128M
      placement:
        constraints:
          - node.role == manager

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    user: redis
    networks:
      - internal
      - public
    depends_on:
      - redis
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=public"
        - "traefik.http.middlewares.redis-commander-auth.basicauth.usersfile=/run/secrets/users.htpasswd"
        - "traefik.http.routers.redis-commander.rule=Host(`xn--d1abk3ai.${ROOT_DOMAIN}`)"
        - "traefik.http.routers.redis-commander.entrypoints=https"
        - "traefik.http.routers.redis-commander.tls=true"
        - "traefik.http.routers.redis-commander.tls.certresolver=le"
        - "traefik.http.routers.redis-commander.middlewares=redis-commander-auth"
        - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"
      replicas: 1
      resources:
        reservations:
          memory: 32M
        limits:
          memory: 64M
      placement:
        constraints:
          - node.role == manager

  traefik:
    image: traefik:v3
    configs:
      - source: traefik.yml
        target: /etc/traefik/traefik.yml
      - source: dynamic.yml
        target: /etc/traefik/dynamic.yml
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    secrets:
      - cloudflare.crt
      - cloudflare.key
      - users.htpasswd
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=public"
        - "traefik.http.middlewares.dashboard-auth.basicauth.usersfile=/run/secrets/users.htpasswd"
        - "traefik.http.routers.dashboard.rule=Host(`xn--80aimpg.${ROOT_DOMAIN}`)"
        - "traefik.http.routers.dashboard.entrypoints=https"
        - "traefik.http.routers.dashboard.tls=true"
        - "traefik.http.routers.dashboard.tls.certresolver=le"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      replicas: 1
      resources:
        reservations:
          memory: 32M
        limits:
          memory: 64M
      placement:
        constraints:
          - node.role == manager

volumes:
  redis-data:
  letsencrypt:
    
configs:
  traefik.yml:
    name: traefik.yml_${STACK_VERSION:-0}
    file: traefik/traefik.yml
  dynamic.yml:
    name: dynamic.yml_${STACK_VERSION:-0}
    file: traefik/dynamic.yml

secrets:
  cloudflare.crt:
    name: cloudflare.crt
    external: true
  cloudflare.key:
    name: cloudflare.key
    external: true
  users.htpasswd:
    name: users.htpasswd
    external: true

networks:
  internal:
    name: internal
    driver: overlay
  public:
    name: public
    driver: overlay
